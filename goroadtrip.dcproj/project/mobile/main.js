/* 
 This file was generated by Dashcode.  
 You may edit this file to customize your widget or web page 
 according to the license.txt file included in the project.
 */

//	
// Function: load()
// Called by HTML body element's onload event when the web application is ready to start
//
// MACROS
var BR_POINTS_PER_CAR = 10;
var BR_ANSWERS_BEFORE_SPEED_UP = 3;  // Number of correct answers before the car speeds up
var BR_PERCENTAGE_OF_PRIMES = .50;  // Percentage of cars that are primes
var BR_PERCENTAGE_OF_MULTS = .60;
var BR_CAR_SPEEDS = new Array(10, 9, 8, 6, 5, 4, 3);  // The starting speed of the cars
var br_primes = new Array(2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59);
var br_nonPrimes = new Array(4,6,8,9,10,12,14,15,16,18,20,21,22,24,25,26,27,28,30,32,33,34,35,36,38,39,40,42,44,45,46,48,49,50,51,52,54,55,56,57,58,60);
var tl_previousGuesses = new Array();
var tl_previousLights = new Array();
var MAXPLAYERS=4;

//var br_primes = new Array(2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 
//52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98);
//br_nonPrimes = new Array(1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 
//51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99);

var EstimationAdjectives = new Array("","Black","Blue","Gold","Green","Grey","Orange", "Pink", "Purple","Red","Silver","White","Yellow")
var EstimationNouns =  new Array("Cars", "Clouds", "Gas Stations", "Houses", "Motorcycles","People","Restaurants", "Trees", "Trucks");
var EstimationTimes =  new Array("1 minute", "2 minutes", "3 minutes", "4 minutes", "5 minutes", "6 minutes", "7 minutes", "8 minutes");

// Variables
var br_primeCarsPoints = 0;
var br_carNumber = 0;
var br_carSpeed = BR_CAR_SPEEDS[Math.floor(br_primeCarsPoints / BR_POINTS_PER_CAR)];
var br_carClicked = false;
var br_primeCarsMistakes = 0;
var br_primeCarsDead = false;  // True when a player has 3 strikes in prime cars
var br_timeouts1 = new Array();
var br_timeouts2 = new Array();
var br_teimouts3;

var P  = 0;
var NP = 1; 

var PCproblem; //number
var PCguess; 
var PCanswer;
var PCvalues = new Array("PRIME","NOT PRIME");
var PCmode;
var PCmultiplier;
var PC_PRIME_MODE = 1;
var PC_EVEN_MODE = 2;
var PC_MULT_MODE = 3;


var TLanswer;
var TLeasymode = true;
var TLcurrentguess;
var TLcurrentPlayer = -1; //for traffic lights, set to -1 initially
var TLSCORE=150; // winning score for traffic lights
var TL_LOWER_PTS_BOUND = 50;
var TL_JACKPOT_PENALTY = 10;
var TLcurJackpot; //number of points for getting traffic lights
var PCcurrentPlayer = -1; //for traffic lights, set to -1 initially

var fromCity;
var toCity;
var guessArray;

var currentplayerid=0; //first player
var numPlayers=2; //total players input. the default is 2

var adminName;

//KEEP TRACK OF PREVIOUS AND NEXT SCREENS
var beforeback;
var back;
var next;
var afternext;

//KEEP TRACK OF CURRENT VIEW
var currentview;

//ADMIN
var adminname;

//USERS
var userfname;
var userlname;

//AVATARS
var currPlayerToChangeAvatar;
var selectedImage;

//CREATING THE PREVIOUS GUESS OBJECT
function TLGuessObject(){
    this.guess = 0;
    this.lights = new Array();
    this.challengelight = '';
    this.avatar = '';
}
var tl_guessHistory;

//CREATING THE PLAYERS OBJECT
function playerObject(){
  this.name      = ''; //playername
  this.score     = 0;  //playerscore
  this.avatar    = ''; //playeravatar
  this.admin     = 0;  //is the player an admin
  this.isplaying = 0;  //is the player playing this game
}
var playerlist;

//CREATING AN OBJECT TO HOLD THE ANSWERS FOR THE PIT STOP GAME
function pitstopAnswersObject(){
  this.answers = new Array();
  this.scores  = new Array();
}

//CREATING AN OBJECT TO HOLD THE ANSWERS FOR THE TRAFFIC SIGNAL GAME
function tlAnswersObject(){
  this.answers = new Array();
  this.scores  = new Array();
}

//CREATING AN OBJECT TO HOLD THE ANSWERS FOR THE PRIME CARS GAME
function pcAnswersObject(){
  this.answers = new Array();
  this.scores  = new Array();
}

var pitstopobj;
var PTproblem; //number
var PTguess;

var geocoder, location1, location2, gDir;
var distanceMiles;

var inputNum = new Array(0,0,0);

var estimateCount = 0; //Keeps track of the count during estimationStation
var secretMode = true;
var estimateTimer;
var estimateTimerMin;
var estimateTimerSec;

//Creating an object to hold player estimates for EstimationStation
function estimateObj(){
  this.estimate = "";
  this.difference  = "";
  this.playerNumber = 0;
}
var estimatesObj;

//Creating an array to hold if matchup between adjectives and nouns makes sense
var appropriateAdj = new Array();

// Macros
var RED = 100;
var YELLOW = 10;
var GREEN = 1;


//DATABASE VARIABLES
var xmlhttp;
var userid;
var url="gortbackend.php";
var currentsid;

//GAMES LIST
var PC = 0;
var TL = 1;
var PS = 2;
var ES = 3

var games = new Array("PRIMECARS","TRAFFICLIGHTS","PITSTOP", "ESTIMATIONSTATION");

function load()
{
    dashcode.setupParts();
    //geocoder = new google.maps.Geocoder();
    //alert("passedsetupparts");
    setTimeout(function() { window.scrollTo(0, 1) }, 100);
    //SETUP THE PLAYER LIST
    playerlist = new Array();
    for(var j=0; j < MAXPLAYERS; j++){
      playerlist[j] = new playerObject();
    }
    
    //SETUP THE PLAYER VARS AND OBJECTS
    pitstopobj = new Array();
    for(var i=0; i < MAXPLAYERS; i++){
      pitstopobj[i] = new pitstopAnswersObject();
    }
    
    pcobj = new Array();
    for(var i=0; i < MAXPLAYERS; i++){
      pcobj[i] = new pcAnswersObject();
    }
    
    //alert("setting up estimation");
    estimatesObj = new Array();
    for(var i=0; i < MAXPLAYERS; i++){
      estimatesObj[i] = new estimateObj();
    }
    
    setupAppropriateAdj(event);
    //alert("finished load");
}

function gotoGames(event) {
    var views = document.getElementById('stackLayout');
		var about = document.getElementById('gameSelect');
		if (views && views.object && about) {
			views.object.setCurrentView(about);
		}
}

function br_makeCar() {
    br_carNumber = br_generateNumber(PCmode);
    br_carNumberText.innerText = br_carNumber;
    PCproblem = br_carNumber;

    br_frames = 360;
    for(i = 1 ; i < br_frames ; i += 3){
        br_timeouts1[i] = setTimeout("document.getElementById('br_Car').style.left = '"+(i*-1)+"px';",i*br_carSpeed);
        br_timeouts2[i] = setTimeout("document.getElementById('br_carNumberText').style.left = '"+(i*-1)+"px';",i*br_carSpeed);
    }
    br_timeouts3 = setTimeout("br_carAtEnd();",br_frames*br_carSpeed);
}

function br_generateNumber(gameMode) {
    var generateAPrime = Math.random() < BR_PERCENTAGE_OF_PRIMES;
    var generateAMultiple = Math.random() < BR_PERCENTAGE_OF_MULTS;
    var numbergened = -1;
    if(gameMode == PC_PRIME_MODE) {
        if (generateAPrime) {
            numbergened = br_primes[Math.floor(Math.random()*br_nonPrimes.length)];
        } else {
            numbergened = br_nonPrimes[Math.floor(Math.random()*br_primes.length)];
        }
    }else if(gameMode == PC_EVEN_MODE) {
        numbergened = Math.floor(Math.random()*100);
    }else{
        if(generateAMultiple) {
            while(numbergened >= 100 || numbergened < 0) {
                numbergened = PCmultiplier * randomNum(0, 12);
            }
        }else{
            while(numbergened == -1 || numbergened % PCmultiplier == 0) {
                numbergened = randomNum(0, 100);
            }
        }
    }
    return numbergened;
}

function randomNum(low, high) {
    return Math.floor(Math.random()*(Math.abs(high-low)))+Math.min(low, high)
}

function codeLatLng(lat, lng) {
    /*var latlng = new google.maps.LatLng(lat, lng);
    if (geocoder) {
      geocoder.geocode({'latLng': latlng}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          if (results[1]) {
            // Values you provide
            var textFieldToChange = document.getElementById("startCity");
            var newTextFieldText = results[1].formatted_address;
            textFieldToChange.value = newTextFieldText;
          } else {
            alert("No results found");
          }
        } else {
          alert("Geocoder failed due to: " + status);
        }
      });
    }
    */

  }


function about_action(event)
{
    var views = document.getElementById('stackLayout');
    var about = document.getElementById('about');
	if (views && views.object && about) {
		views.object.setCurrentView(about);
	}
}

 
// Function to determine whether number is prime, even or a multiple
function br_isPrime(num) 
{
    // 1 is not prime
    if(PCmode == PC_PRIME_MODE) {
        for(var i = 0; i < br_primes.length; i++) {
            if(br_primes[i] == num) {
                return true;
            }
        }
    }else if(PCmode == PC_EVEN_MODE) {
        return (num%2 == 0);
    }else{
        return (num%PCmultiplier == 0);
    }
    return false;
}

function pause(millis)
{
var date = new Date();
var curDate = null;

do { curDate = new Date(); }
while(curDate-date < millis);
}


// Do something when a player makes a mistake
function br_carMistake() {
    br_primeCarsMistakes++;
    br_carClicked = true;

    if (br_primeCarsMistakes == 3) {
        br_mistakesText.innerText = "X X X";
        br_primeCarsDead = true;
        pause(100);
        
        //traffic lights scores
        pcobj[PCcurrentPlayer].score = br_primeCarsPoints;
        //overall scores
        playerlist[PCcurrentPlayer].score += br_primeCarsPoints;

        
        PCpass();
    } else if (br_primeCarsMistakes == 2) {
        br_mistakesText.innerText = "X X  ";
    } else if (br_primeCarsMistakes == 1) {
        br_mistakesText.innerText = "X    ";
    } else {
        br_mistakesText.innerText = "";
    }

}

// When the car is at the end of the line
function br_carAtEnd() {

    if (Math.floor (br_primeCarsPoints / BR_ANSWERS_BEFORE_SPEED_UP / BR_POINTS_PER_CAR) < BR_CAR_SPEEDS.length) {
        br_carSpeed = BR_CAR_SPEEDS[Math.floor(br_primeCarsPoints / BR_ANSWERS_BEFORE_SPEED_UP / BR_POINTS_PER_CAR)];
    }
    if (br_carClicked == false) {
        br_carMistake();
    }
    
    br_carClicked = false;

    // Only make a new car if the player is not dead
    if (br_primeCarsDead == false) {
        br_makeCar();
    }
}

function br_primeClickHandler(event)
{
    PCguess = PCvalues[P];
    if (br_carClicked) {
        return;
    }
    if (br_isPrime(br_carNumber)) {
        PCanswer = PCvalues[P];
        br_primeCarsPoints += BR_POINTS_PER_CAR;
        br_carClicked = true;
    } else {
        PCanswer = PCvalues[NP];
        br_carMistake();
    }
    
    //Add Guess To Database
    addGuessJS(playerlist[PCcurrentPlayer+1].name,PCproblem,PCguess,PCanswer);
    br_pointsText.innerText = br_primeCarsPoints + " points!";
}


function br_nonPrimeClickHandler(event)
{   
    PCguess = PCvalues[NP];
    // alert("CLICK! " + br_carNumber);
    if (br_carClicked) {
        return;
    }
    if (!br_isPrime(br_carNumber)) {
        PCanswer = PCvalues[NP];
        br_primeCarsPoints += BR_POINTS_PER_CAR;
        br_carClicked = true;
    } else {
        PCanswer = PCvalues[P];
        br_carMistake();
    }
    
    //Add Guess To Database
    addGuessJS(playerlist[PCcurrentPlayer+1].name,PCproblem,PCguess,PCanswer);
    br_pointsText.innerText = br_primeCarsPoints + " points!";
}

function startGame(event)
{
        userSelection(event);
    
}

function figureOutDistance(event) {
        var views = document.getElementById('stackLayout');
		var about = document.getElementById('geography');
		if (views && views.object && about) {
			views.object.setCurrentView(about);
		}
         /*if (navigator.geolocation) {
            var position = navigator.geolocation.getCurrentPosition(showMap);
        } else {
            //alert("no geolocation feature in this browser");
            
        }*/
}


function showMap(position) {
    codeLatLng(position.coords.latitude, position.coords.longitude);
}


function backToHome(event)
{
        var views = document.getElementById('stackLayout');
		var about = document.getElementById('gameSelect');
		if (views && views.object && about) {
			views.object.setCurrentView(about);
		}
}

function gotoScores(event){
  var views    = document.getElementById('stackLayout');
  var next     = document.getElementById('scores');
  
  //GO TO NEXT SCREEN
  if (views && views.object && next) {
    displayScores();
    views.object.setCurrentView(next);		
  }

}


function calculateDistances(event)
{
    var views = document.getElementById('stackLayout');
    var about = document.getElementById('distances');
    if (views && views.object && about) {
			views.object.setCurrentView(about);
    }
        
    var startVal = document.getElementById("startCity");	// replace with ID of text field
    startVal = startVal.value;
    
    var endVal = document.getElementById("endCity");	// replace with ID of text field
    endVal = endVal.value;
    
    fromCity = startVal 
    toCity = endVal;
    document.getElementById("fromTo").innerText = fromCity + " and " + toCity;
}

/*
function addUsertoDatabase(){

  addUserJS(userfname,userlname);
  setTimeout("createSessionJS()",1000);
}
*/

function logintoDatabase(){
  loginJS(userfname,userlname);
}

function userSelection(event)
{
    var views = document.getElementById('stackLayout');
    var about = document.getElementById('users');
    if (views && views.object && about) {
        views.object.setCurrentView(about);
    }
}

function playerSelection(event)
{
    userfname = document.getElementById('firstname').value;
    userlname = document.getElementById('lastname').value;
    
    logintoDatabase();
    document.getElementById('name1').value = userfname;
	document.getElementById('name2').value = "P2";
	document.getElementById('name3').value = "P3";
	document.getElementById('name4').value = "P4";
        
    var views = document.getElementById('stackLayout');
    var about = document.getElementById('players');
    if (views && views.object && about) {
        views.object.setCurrentView(about);
    }
}


function selectPlayers(event)
{
    numPlayers = document.getElementById('popup').value;
    
    //code used to dynamically change images into a new image
    //var avatarChange = document.getElementById('avatar1');
    //var newAvatar = document.getElementById('avatar4');
    //avatarChange.src = "Images/gray.png";
    
    if (numPlayers =="2") {
        numPlayers = 2;
        name3 = document.getElementById('name3');
        name3.style.visibility = 'hidden';
        avatar3 = document.getElementById('avatar3');
        avatar3.style.visibility = 'hidden';
        document.getElementById('name4').style.visibility = 'hidden';
        document.getElementById('avatar4').style.visibility = 'hidden';
    }
    
    if (numPlayers =="3") {
        numPlayers = 3;
        name3 = document.getElementById('name3');
        name3.style.visibility = 'visible';
        avatar3 = document.getElementById('avatar3');
        avatar3.style.visibility = 'visible';
        document.getElementById('name4').style.visibility = 'hidden';
        document.getElementById('avatar4').style.visibility = 'hidden';
    }
    
    if (numPlayers =="4") {
        numPlayers = 4;
        name3 = document.getElementById('name3');
        name3.style.visibility = 'visible';
        avatar3 = document.getElementById('avatar3');
        avatar3.style.visibility = 'visible';
        name4 = document.getElementById('name4');
        name4.style.visibility = 'visible';
        avatar4 = document.getElementById('avatar4');
        avatar4.style.visibility = 'visible';
    }
}


var callno = 1;

function internalHomepage(event)
{
    
    //GET ALL THE PLAYER INFO BEFORE GOING TO THE INTERNAL GAMES HOMEPAGE
    //ALSO LOAD THE PLAYER SELECTION POPUP FOR TRAFFIC LIGHTS
    for (var i = 0; i < numPlayers; i++){
        playerlist[i].name   = document.getElementById('name' + (i+1)).value;
        playerlist[i].avatar = document.getElementById('avatar' + (i+1)).src;
        vgPlayerPopup.options[i].text = document.getElementById('name' + (i+1)).value;
        vgPlayerPopup.options[i].value = document.getElementById('name' + (i+1)).value;
      
        //SEND PLAYER NAME TO DATABASE
        //alert('session id before addPlayerJS is ' + currentsid);
        if(i!=0 || userfname != playerlist[i].name) {
            addPlayerJS(playerlist[i].name);
        }
    }
    
    // Populate Estimation Station Adjective List
    for (var i = 0; i < EstimationAdjectives.length; i++){      
        adjectivepopup.options[i].text = EstimationAdjectives[i];
        adjectivepopup.options[i].value = EstimationAdjectives[i];
    }

    // Populate Estimation Station Noun List
    for (var i = 0; i < EstimationNouns.length; i++){      
        nounpopup.options[i].text = EstimationNouns[i];
        nounpopup.options[i].value = EstimationNouns[i];
    }

    // Populate Estimation Station EstimationTimes List
    for (var i = 0; i < EstimationTimes.length; i++){      
        estimatetimepopup.options[i].text = EstimationTimes[i];
        estimatetimepopup.options[i].value = EstimationTimes[i];
    }

    var views = document.getElementById('stackLayout');
    var about = document.getElementById('gameSelect');
    
    if (views && views.object && about) {
        views.object.setCurrentView(about);
    }
}

function getCurrentPlayerName(){
  return players[currentplayerid].name;
}

function getCurrentPlayerAvatar(){
  return players[currentplayerid].avatar;
}

function TLpass() {
    if (TLcurrentPlayer < numPlayers-1) {
        var nextName = playerlist[TLcurrentPlayer+1].name;
        if (nextName == adminName) {
            TLcurrentPlayer++;
            TLpass();
            return;
        }
        // Pass to next player
        playerlist[TLcurrentPlayer+1].isplaying=1;
        document.getElementById('TLnextName').innerText =nextName;
        document.getElementById('TLnextAvatar').src = playerlist[TLcurrentPlayer+1].avatar;
        TLcurrentPlayer++;
        var nextView = document.getElementById('TLpassScreen');
        setCurrentViewTL(nextView);
    } else {
        TLcurrentPlayer = -1;
        TLpass();
    }
}

function setCurrentViewTL(a) 
{
    var view = document.getElementById('stackLayout');
    var tl = document.getElementById('trafficLights');
    var sl2= document.getElementById('tl');
    sl2.object.setCurrentView(a);
    view.object.setCurrentView(tl);
}

function startTrafficLights(event)
{
    var tlHome = document.getElementById('tlHome');
    setCurrentViewTL(tlHome);
}

function startPrimeCars(event) {
    var view = document.getElementById('stackLayout');
    var newView = document.getElementById('PChome');
    view.object.setCurrentView(newView);
}

function VPgenerateRandomNumber(event) {
    var num1 = Math.floor(Math.random()*10);
    var num2 = Math.floor(Math.random()*10);
    var num3 = Math.floor(Math.random()*10);
    TLSubmitSecretNumber(num1, num2, num3, false);
    TLpass();
}

function TLSubmitSecretNumber(num1, num2, num3, isAdmin) {
    var errorText = document.getElementById("errorText");
    
    inputNum = new Array(num1, num2, num3);
    tl_guessHistory = new Array();
    clearHistory();
    errorText.innerText = "";
    TLcurJackpot = TLSCORE;
    TLanswer = (num1*100)+(num2*10)+num3;
    if(isAdmin) {
        adminName = document.getElementById('vgPlayerPopup').value;
    }else{
        adminName = "";
    }
}

function validateInputButton(event)
{
    var inputFieldValue = document.getElementById("inputField");
    var errorText = document.getElementById("errorText");
    
    if (isNaN(inputFieldValue.value) || inputFieldValue.value.length != 3) {
        errorText.innerText = "Incorrect number input. Please enter a 3 digit number.";
    } else if (document.getElementById('vgPlayerPopup').value == "") {
        errorText.innerText = "Please select the player who is picking a number.";
    }else{
        // Code to set the input numbers.  Kind of ugly but it works!
        inputNum = inputFieldValue.value * 1;
        var num1 = (inputNum - inputNum % 100) / 100;
        var num2 = ((inputNum - inputNum % 10) % 100) / 10;
        var num3 = inputNum % 10;
        TLSubmitSecretNumber(num1, num2, num3, true);
        TLpass();
    }
    
}

function tlGuess(event)
{
    var screen = document.getElementById('inputNumber');
    setCurrentViewTL(screen);
}


function VPclearTextField(event)
{
    if (event.srcElement = document.getElementById('name1') && document.getElementById('name1').value == "Player 1") {
        document.getElementById('name1').value = "";
    }
    
    else if (event.srcElement = document.getElementById('name2') && document.getElementById('name2').value == "Player 2") {
        document.getElementById('name2').value = "";
    }
    
    else if (event.srcElement = document.getElementById('name3') && document.getElementById('name3').value == "Player 3") {
        document.getElementById('name3').value = "";
    }
    
    else if (event.srcElement = document.getElementById('name4') && document.getElementById('name4').value == "Player 4") {
        document.getElementById('name4').value = "";
    }
}

function changeTLmode(event)
{
    TLeasymode = (document.getElementById('TLeasymode').checked);
    setTLMode(TLeasymode);
}

function changeTLmodeToHard(event)
{
    document.getElementById('TLeasymode').checked = false;
    document.getElementById('TLhardmode').checked = true;
    changeTLmode(event);
}

function changeTLmodeToEasy(event)
{
    document.getElementById('TLeasymode').checked = true;
    document.getElementById('TLhardmode').checked = false;
    changeTLmode(event);
}

function changePCmodeToPrime(event)
{
    document.getElementById('PCrad1').checked = true;
}

function changePCmodeToEven(event)
{
    document.getElementById('PCrad2').checked = true;
}

function changePCmodeToMultiple(event)
{
    document.getElementById('PCrad3').checked = true;
}

function setPCRadiosToFalse(event)
{
    for(var i = 1; i <= 3; i++) {
        document.getElementById("PCrad"+i).checked = false;
    }
}
    

function setTLMode(easy) {
    if(easy) {
        var Evisibility = 'visible';
        var Hvisibility = 'hidden';
    }else{
        var Evisibility = 'hidden';
        var Hvisibility = 'visible';
    }
    for(var i = 0; i < 3; i++) {
        document.getElementById('indicator'+(3+i)).style.visibility = Evisibility;
        document.getElementById('text'+(26+i)).style.visibility = Evisibility;
    }
    document.getElementById('text6').style.visibility = Evisibility;
    document.getElementById('challengemodetext1').style.visibility = Hvisibility;
    document.getElementById('challengemodetext2').style.visibility = Hvisibility;
    document.getElementById('challengemodeimage').style.visibility = Hvisibility;
}


function TLonGuess(event)
{
    var textFieldValue = document.getElementById("numberInput");
    TLguess = textFieldValue = textFieldValue.value;

    //ADD TRAFFIC LIGHTS GUESS TO DATABASE
    addGuessJS(playerlist[TLcurrentPlayer].name, TLanswer, TLguess, TLanswer);

    var views = document.getElementById('stackLayout');
    var about;
    
    if (isNaN(textFieldValue) || textFieldValue.length != 3) {
        guessErrorText.innerText = "Incorrect number input";
        about = document.getElementById('guessInputScreen');
    }
    else if (TLcheckValues3(textFieldValue)) {
        // Winning situation
        var origNum = document.getElementById("originalNumText");
        origNum.innerText = "The number was " + textFieldValue;
        var winAvatar = document.getElementById("winAvatar");
        winAvatar.src = playerlist[TLcurrentPlayer].avatar;
        var winText = document.getElementById("winText");
        winText.innerText = playerlist[TLcurrentPlayer].name + " wins!";
        about = document.getElementById('winScreen');
        guessErrorText.innerText = "";
        
        //overall scores
        playerlist[TLcurrentPlayer].score += TLcurJackpot;
        
        setCurrentViewTL(about);
    } else {
        if(TLcurJackpot > TL_LOWER_PTS_BOUND) {
            TLcurJackpot -= TL_JACKPOT_PENALTY;
        }
        TLpass();
    }
}

function TLcheckValues3(valueString) {
    var guess = valueString * 1;
    document.getElementById("lastGuessText").innerText = "The last guess was "+guess;
    document.getElementById("lastGuessText").style.visibility = 'visible';
    var guessDigits = TLbreakDownGuess(guess);
    var lightsArray = TLsetLights(guessDigits, inputNum);
    TLpopulateScreenWithLights(lightsArray, guess);
    return TLguessedTheNumber(lightsArray);
}

function TLpopulateScreenWithLights(lightsArray, guess) {
    var tl_guess = new TLGuessObject();
    tl_guess.guess = guess;
    tl_guess.lights = lightsArray;
    tl_guess.challengelight = TLgetChallengeCode(lightsArray);
    tl_guess.avatar = document.getElementById("currPlayerAvatar").src;
    tl_guessHistory.push(tl_guess);
	TLbuildHistory3();

    // Set indicators
    if(TLeasymode) {
        document.getElementById("lastGuessNum").innerText = guess;
        document.getElementById("lastGuessNum").style.visibility = 'visible';
        for (i = 0 ; i < 3 ; i++) {
            document.getElementById("light" + (i+1)).object.setValue(lightsArray[i]);
            document.getElementById("light" + (i+1)).style.visibility = 'visible';
        }
    }else{
        var challengeLight = document.getElementById("lastchallengelight");
        var newChallengeImageName = TLformChallengeName(tl_guess); 
        challengeLight.src = newChallengeImageName;
        challengeLight.style.visibility = 'visible';
    }
}

function TLformChallengeName(guessObj) {
    return "Images/challengelights" + guessObj.challengelight + ".png";
}

function TLguessedTheNumber(lightsArray) {
    for(var i = 0; i < lightsArray.length; i++) {
        if(lightsArray[i] != GREEN) {
            return false;
        }
    }
    return true;
}

function TLgetChallengeCode(lightsArr) {
    var counts = TLfindCounts(lightsArr);
    return TLcreateCountsStr(counts);
}

function TLfindCounts(guesses) {
    var counts = new Array(0, 0, 0);
    
    counts[0] = TLcountChars(RED, guesses);
    counts[1] = TLcountChars(YELLOW, guesses);
    counts[2] = TLcountChars(GREEN, guesses);
    return counts;
}

function TLcreateCountsStr(counts) {
    var countStr = '';
    for(var i = 0; i < counts.length; i++) {
        countStr += counts[i];
    }
    return countStr;
}

function TLcountChars(letterMatch, guesses) {
    var count = 0;
    for(var i = 0; i < guesses.length; i++) {
        if(letterMatch == guesses[i]) {
            count++;
        }
    }
    return count;
}

function TLshouldBeYellow(num, digits, lights, answersReached) {
    for(var i = 0; i < digits.length; i++) {
        if(digits[i] == num) {
            if(!answersReached[i]) {
                answersReached[i] = true;
                return true;
            }
        }
    }
    return false;
}

function TLbreakDownGuess(num) {
    var tempDigits = new Array(0, 0, 0);
    
    for(var i = tempDigits.length-1; i >= 0; i--) {
        tempDigits[i] = num % 10;
        num = num / 10;
        num = Math.floor(num);
    }
    return tempDigits;
}

function TLsetLights(guessDigits, answerDigits) {
    var lights = new Array(0, 0, 0);
    var answersReached = new Array(false, false, false);
    
    for(var i = 0; i < lights.length; i++) {
        if(guessDigits[i] == answerDigits[i]) {
            lights[i] = GREEN;
            answersReached[i] = true;
        }
    }
    
    for(var i = 0; i < lights.length; i++) {
        if(lights[i] == 0) {
            if(TLshouldBeYellow(guessDigits[i], answerDigits, lights, answersReached)) {
                lights[i] = YELLOW;
            }else{
                lights[i] = RED;
            }
        }
    }
    return lights;
}

function TLbuildHistory() {
	var guessTxt = "";
	var numGuesses = tl_previousGuesses.length-1;
	for(var i = 0; i < tl_previousGuesses.length && i < 4; i++) {
		guessTxt += " " + (i+1) + ": " + tl_previousGuesses[numGuesses-i] + ";";
	}
	return guessTxt;
}

function TLbuildHistory2() {
	var guessTxt = "";
	var numGuesses = tl_previousGuesses.length-1;
	for(var i = 0; i < tl_previousGuesses.length && i < 2; i++) {
		guessTxt += " " + (i+1) + ": " + tl_previousGuesses[numGuesses-i] + ";";
		var curLights = tl_previousLights[numGuesses-i];
		for(var j = 0; j < curLights.length; j++) {
			guessTxt += curLights[j] + ",";
		}
	}
	return guessTxt;
}

function TLbuildHistory3() {
    var numGuesses = tl_guessHistory.length-1;
    for(var i = 0; i < tl_guessHistory.length && i < 8; i++) {
        var ithvar = i + 1;
        
        if(TLeasymode) {
            document.getElementById("EHist" + ithvar).style.visibility = 'visible';
            document.getElementById("EHist" + ithvar).innerText = tl_guessHistory[numGuesses-i].guess;
            for(var j = 0; j < tl_guessHistory[i].lights.length; j++) {
                document.getElementById("indicator"+ithvar+""+j).style.visibility = 'visible';
                document.getElementById("indicator"+ithvar+""+j).object.setValue(tl_guessHistory[numGuesses-i].lights[j]);
            }
        }else{
            document.getElementById("DHist" + ithvar).style.visibility = 'visible';
            document.getElementById("DHist" + ithvar).innerText = tl_guessHistory[numGuesses-i].guess;
            document.getElementById("histchallenge"+ithvar).style.visibility = 'visible';
            document.getElementById("histchallenge"+ithvar).src = TLformChallengeName(tl_guessHistory[numGuesses-i]);
        }
        document.getElementById("histavatar" + ithvar).style.visibility = 'visible';
        document.getElementById("histavatar" + ithvar).src = tl_guessHistory[numGuesses-i].avatar;
	}

    //document.getElementById("lastGuessText").innerText = buildHistory2();

}

function clearHistory() {
    for(var i = 0; i < 8; i++) {
        var ithvar = i + 1;
        document.getElementById("DHist" + ithvar).style.visibility = 'hidden';
        document.getElementById("DHist" + ithvar).innerText = '';
        document.getElementById("EHist" + ithvar).style.visibility = 'hidden';
        document.getElementById("EHist" + ithvar).innerText = '';
        for(var j = 0; j < 3; j++) {
            document.getElementById("indicator"+ithvar+""+j).style.visibility = 'hidden';
            document.getElementById("indicator"+ithvar+""+j).object.setValue(0);
        }
        document.getElementById("histchallenge" + ithvar).style.visibility = 'hidden';
        document.getElementById("histchallenge" + ithvar).src = '';
        document.getElementById("histavatar" + ithvar).style.visibility = 'hidden';
        document.getElementById("histavatar" + ithvar).src = '';
	}
    clearLastGuessText();
}

function clearLastGuessText() {
    for(var i = 1; i <= 3; i++) {
        document.getElementById("light"+i).style.visibility = 'hidden';
        document.getElementById("light"+i).object.setValue(0);
    }
    document.getElementById("lastGuessText").style.visibility = 'hidden';
    document.getElementById("lastGuessText").innerText = '';
    document.getElementById("lastchallengelight").style.visibility = 'hidden';
    document.getElementById("lastGuessNum").style.visibility = 'hidden';
    document.getElementById("lastGuessNum").innerText = '';
}


function TLonNext(event)
{
    var inputField = document.getElementById('numberInput');
    inputField.value = "";
    var currAvatar = document.getElementById('currPlayerAvatar');
    currAvatar.src = playerlist[TLcurrentPlayer].avatar;
    var guessTxt = document.getElementById('guessjackpottext');
    guessTxt.innerText = "Try to guess the 3 digit number!\nIf you're right you'll get " + TLcurJackpot + " points!";
    
    var screen = document.getElementById('guessInput');
    setCurrentViewTL(screen);
}


function TLskipTurn(event)
{
    document.getElementById("lastGuessText").innerText = "The last turn was skipped";
    document.getElementById("lastGuessText").style.visibility = 'visible';
    // Set indicators
    for (i = 0 ; i < 3 ; i++) {
        document.getElementById("light" + (i+1)).style.visibility = 'hidden';
    }
    TLpass();
}


function PCpass(event)
{
    
    if (PCcurrentPlayer < numPlayers-1) {
        PCmode = PCdetermineMode();
        var nextName = playerlist[PCcurrentPlayer+1].name;
        playerlist[PCcurrentPlayer+1].isplaying = 1;
        
        // Pass to next player
        document.getElementById('PCnextName').innerText = nextName;
        document.getElementById('PCnextAvatar').src = playerlist[PCcurrentPlayer+1].avatar;
        PCcurrentPlayer++;
        var nextView = document.getElementById('PCpassScreen');
        document.getElementById('stackLayout').object.setCurrentView(nextView);
    } else {
        // Go to scores page
        PCcurrentPlayer = -1;
        gotoScores();
    }
}

function PCdetermineMode() 
{    
    for(var i = 1; i <= 2; i++) {
        if(document.getElementById("PCrad"+i).checked) {
            return i;
        }
    }
    PCmultiplier = document.getElementById('PCmultValue').value;
    return PC_MULT_MODE;
}

function PCSkipPass(event)
{
    for(i = 1; i < br_frames; i++) {
        clearTimeout(br_timeouts1[i]);
        clearTimeout(br_timeouts2[i]);
    }
    clearTimeout(br_timeouts3);
    //br_primeCarsMistakes = 3;
    br_carAtEnd();
    //PCpass(event);
    //PCpass(event);
}

function PCstartGame(event)
{
    var view = document.getElementById('stackLayout');
    var newView = document.getElementById('PCcontent');
    view.object.setCurrentView(newView);
    
    //SETUP Prime Cars stuff
    br_carNumber = 0;
    br_carSpeed = 10;
    br_carClicked = false;
    br_primeCarsMistakes = 0;
    br_primeCarsPoints = 0;
    br_primeCarsDead = false;
    br_mistakesText.innerText = " ";
    br_pointsText.innerText = "";
    br_message.innerText = PCdetermineText();
    
    br_makeCar();
}

function PCdetermineText() {
    var text = "Identify if the number on the cars is ";
    if(PCmode == PC_PRIME_MODE) {
        text += "prime or composite";
        br_primeButton.object.setText("Prime");
        br_notPrimeButton.object.setText("Not Prime");
    }else if(PCmode == PC_EVEN_MODE) {
        text += "even or odd";
        br_primeButton.object.setText("Even");
        br_notPrimeButton.object.setText("Odd");
    }else{
        text += "a multiple of " + PCmultiplier;
        br_primeButton.object.setText("Multiple of " + PCmultiplier);
        br_notPrimeButton.object.setText("Not a Multiple");
    }
    return text;
}




///////////////////////////////////////////////////////////////
// EVENT HANDLERS ETC FOR PLAYER STUFF 
///////////////////////////////////////////////////////////////
function isInteger(s) {
  return (s.toString().search(/^-?[0-9]+$/) == 0);
}

function setadminflag(){
  for (var i = 0; i < numPlayers; i++){
    if (playerlist[i].name == adminname){
      playerlist[i].admin = 1;
    }
  }
}

function displayScores(){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('scores');
  
  var playername;
  var playerscore;
  var playergauge;
  var playeravatar;
  
  //alert('total players' + numPlayers);
  var ordering = figureOutScoreOrder();
  
  //SET PLAYER NAMES AND ANSWERS
  for (var j = 0; j < numPlayers; j++){
    
    var i = ordering[j];
    //get the text element for the player name and the player answer
    playername   = document.getElementById('player' + (j+1));
    playerscore  = document.getElementById('score'  + (j+1));
    pscoregauge  = document.getElementById('p' + (j+1) + 'scoregauge');
    playeravatar = document.getElementById('p' + (j+1) + 'avatar');
    
    //update the text element for the player name and the player answer
    playername.innerHTML   = playerlist[i].name;
    playerscore.innerHTML  = playerlist[i].score;
    playeravatar.src       = playerlist[i].avatar;
    pscoregauge.object.setValue(playerlist[i].score);
    
    /*if (!(playerlist[j].isplaying)){
      //if the player is playing only then make the score visible.
      playername.style.visibility='hidden';
      playerscore.style.visibility='hidden';
      pscoregauge.style.visibility='hidden';
    }
    else{
      pscoregauge.style.visibility='visible';
      playeravatar.style.visibility='visible';
    }*/
    playername.style.visibility='visible';
    playerscore.style.visibility='visiblie';
    pscoregauge.style.visibility='visible';
    playeravatar.style.visibility='visible';
    
  }//for loop ends 
  
  //reset currentplayerid back to 0, and also set all the isplaying 
  //flags back to 1.
  currentplayerid=0;
  for (var i = 0; i < numPlayers; i++){
    playerlist[i].isplaying=1; 
  }
  
}

function displayScores2() {
    
}

function figureOutScoreOrder() {
    var ordering = new Array();
    var beenUsed = new Array();
    var maxIndex;
    var maxValue;
    for(var i = 0; i < numPlayers; i++) {
        maxIndex = 0;
        maxValue = -1; //cruddy I know
        for(var j = 0; j < numPlayers; j++) {
            if(playerlist[j].score > maxValue && !beenUsed[j]) {
                maxIndex = j;
                maxValue = playerlist[j].score;
            }
        }
        ordering[i] = maxIndex;
        beenUsed[maxIndex] = true;
    }
    return ordering;
}


function pitstopPass2Player(event){
  
  //GO TO NEXT SCREEN
  if (currentview && currentview.object && afternext) {
    currentview.object.setCurrentView(afternext);		
  }
}

///////////////////////////////////////////////////////////////
// EVENT HANDLERS ETC FOR PLAYER STUFF 
///////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////
// EVENT HANDLERS ETC FOR PIT STOP STUFF 
///////////////////////////////////////////////////////////////

function gotoPitStop(event){
  var currView   = document.getElementById('stackLayout');
  var pitstop   = document.getElementById('pitstop');
  var psviews = document.getElementById('pitstoprules');
  var about   = document.getElementById('amstackLayout3');
  about.object.setCurrentView(psviews);
  if (currView && currView.object && pitstop) {
    currView.object.setCurrentView(pitstop);
  }
}


function pitstoprulesBack(event){
  var views    = document.getElementById('stackLayout');
      back     = document.getElementById('games');
  
  //GO TO PREVIOUS SCREEN
  if (views && views.object && back) {
    views.object.setCurrentView(back);		
  }
}


function pitstoprulesNext(event){
  var views      = document.getElementById('stackLayout');
  var psviews    = document.getElementById('amstackLayout3');
  var next       = document.getElementById('pitstopadminselect');
  var adminpopup = document.getElementById('psadminpopup');
  
  for(var i =0; i < numPlayers; i++){
    adminpopup[i].label = playerlist[i].name;
    adminpopup[i].value = playerlist[i].name;
  }
  adminpopup[i].label = 'other';
  adminpopup[i].value = 'other';
    
  //GO TO NEXT SCREEN
  if (views && psviews && psviews.object && next) {
    psviews.object.setCurrentView(next);		
  }
}

function pitstopadminselectNext(event){
  var views      = document.getElementById('stackLayout');
  currentview    = document.getElementById('amstackLayout3');
      next       = document.getElementById('pitstoppass2player');
      afternext  = document.getElementById('pitstopq1');
      
  //GET ADMIN NAME
  adminname = document.getElementById('psadminpopup').value;
  setadminflag();
  
  //IF THE FIRST PLAYER IS THE ADMIN SKIP
  while(playerlist[currentplayerid].admin){
    currentplayerid++;
  }
  playerlist[currentplayerid].isplaying=1;
  
  //SET PLAYER NAME
  var q1playername       = document.getElementById('q1player');
  q1playername.innerHTML = playerlist[currentplayerid].name;
  
  var q1playeravatar     = document.getElementById('q1avatar');
  q1playeravatar.src       = playerlist[currentplayerid].avatar;
  
  //SET THE NAME FOR THE PASS 2 PLAYER SCREEN
  var playername         = document.getElementById('psp2pname');
  playername.innerHTML   = playerlist[currentplayerid].name;
  
  var playeravatar       = document.getElementById('psp2pavatar');
  playeravatar.src       = playerlist[currentplayerid].avatar;
  
  //GO TO NEXT SCREEN
  if (views && currentview && currentview.object && next) {
    currentview.object.setCurrentView(next);		
  }
}

function pitstopq1Back(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var back     = document.getElementById('pitstoprules');
  
  //GO TO PREVIOUS SCREEN
  if (views && psview && psview.object && back) {
    psview.object.setCurrentView(back);		
  }
}

function pitstopq1Pass(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var next     = document.getElementById('pitstopq2');
  
  //SET PLAYER NAME
  var q2playername       = document.getElementById('q2player');
  q2playername.innerHTML = playerlist[currentplayerid].name;
  
  var q2playeravatar     = document.getElementById('q2avatar');
  q2playeravatar.src     = playerlist[currentplayerid].avatar;
  
  //READ THE VALUE FROM THE TEXTBOX
  pitstopobj[currentplayerid].answers[0] = '';

  //GO TO NEXT SCREEN
  if (views && psview && psview.object && next) {
    psview.object.setCurrentView(next);		
  }
}


function pitstopq1Next(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var next     = document.getElementById('pitstopq2');
  var answer   = document.getElementById('q1answer');
  var errortxt = document.getElementById('q1error');
  
  if (isInteger(answer.value) && parseInt(answer.value) > 0){
    //SET PLAYER NAME
    var q2playername       = document.getElementById('q2player');
    q2playername.innerHTML = playerlist[currentplayerid].name;
    
    var q2playeravatar     = document.getElementById('q2avatar');
    q2playeravatar.src     = playerlist[currentplayerid].avatar;
  
    //READ THE VALUE FROM THE TEXTBOX
    pitstopobj[currentplayerid].answers[0] = answer.value;
    
    PTproblem = document.getElementById('ptrules6');
    PTguess = pitstopobj[currentplayerid].answers[0];
    
    addGuessJS(playerlist[currentplayerid].name,PTproblem,PTguess,'NULL');
  
    //RESET TEXTBOX VALUE
    answer.value='';
    errortxt.style.visibility='hidden';
    
    //GO TO NEXT SCREEN
    if (views && psview && psview.object && next) {
      psview.object.setCurrentView(next);		
    }
  }
  else{
    errortxt.style.visibility='visible';
  }
}

function pitstopq2Back(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var back     = document.getElementById('pitstopq1');
  
  //GO TO PREVIOUS SCREEN
  if (views && psview && psview.object && back) {
    psview.object.setCurrentView(back);		
  }
}

function pitstopq2Pass(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var next     = document.getElementById('pitstopq3');
  
  //SET PLAYER NAME
  var q3playername       = document.getElementById('q3player');
  q3playername.innerHTML = playerlist[currentplayerid].name;
  
  var q3playeravatar     = document.getElementById('q3avatar');
  q3playeravatar.src     = playerlist[currentplayerid].avatar;
  
  //READ THE VALUE FROM THE TEXTBOX
  pitstopobj[currentplayerid].answers[1] = '';
  
  //GO TO NEXT SCREEN
  if (views && psview && psview.object && next) {
    psview.object.setCurrentView(next);		
  }
}

function pitstopq2Next(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var next     = document.getElementById('pitstopq3');
  var answer1  = document.getElementById('q2answer1');
  var answer2  = document.getElementById('q2answer2');
  var errortxt = document.getElementById('q2error');

  if (isInteger(answer1.value)    && isInteger(answer2.value) &&
      parseInt(answer1.value) >=  0 && 
      parseInt(answer2.value) >=  0 && parseInt(answer2.value) < 60){
    //SET PLAYER NAME
    var q3playername       = document.getElementById('q3player');
    q3playername.innerHTML = playerlist[currentplayerid].name;
    
    var q3playeravatar     = document.getElementById('q3avatar');
    q3playeravatar.src     = playerlist[currentplayerid].avatar;
  
    //READ THE VALUE FROM THE TEXTBOX
    pitstopobj[currentplayerid].answers[1] = answer1.value + ' hrs ' +   answer2.value + ' mins';
    
     PTproblem = document.getElementById('ptrules8');
    PTguess = pitstopobj[currentplayerid].answers[1];
    
    addGuessJS(playerlist[currentplayerid].name,PTproblem,PTguess,'NULL');
  
    //RESET TEXT BOX VALUES
    answer1.value='';
    answer2.value='';
    errortxt.style.visibility='hidden';
    
    //GO TO NEXT SCREEN
    if (views && psview && psview.object && next) {
      psview.object.setCurrentView(next);		
    }
    
  } else{
    errortxt.style.visibility='visible';
  }
}

function pitstopq3Pass(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  
  //READ THE VALUE FROM THE TEXTBOX
  pitstopobj[currentplayerid].answers[2] = '';
  
  //INCREMENT TO NEXT PLAYER IN LIST
  //IF THIS IS THE ADMIN SKIP 
  do{
    currentplayerid++;
  }while (currentplayerid < MAXPLAYERS && playerlist[currentplayerid].admin);
  if (currentplayerid != MAXPLAYERS) playerlist[currentplayerid].isplaying=1;
  
  if (currentplayerid == numPlayers){
    
    //SET PLAYER NAME FOR THE PASS 2 PLAYER SCREEN
    var playername         = document.getElementById('psadminname');
    playername.innerHTML   = adminname;
    
    next       = document.getElementById('pitstoppass2admin');
    afternext  = document.getElementById('pitstopadminq1');
    
    setadminValues();
  }
  else{
    //SET PLAYER NAME
    var q1playername       = document.getElementById('q1player');
    q1playername.innerHTML = playerlist[currentplayerid].name;
    
    var q1playeravatar     = document.getElementById('q1avatar');
    q1playeravatar.src     = playerlist[currentplayerid].avatar;
      
    //SET THE NAME FOR THE PASS 2 PLAYER SCREEN
    var playername         = document.getElementById('psp2pname');
    playername.innerHTML   = playerlist[currentplayerid].name;
    
    var playeravatar       = document.getElementById('psp2pavatar');
    playeravatar.src       = playerlist[currentplayerid].avatar;
  
    next       = document.getElementById('pitstoppass2player');
    afternext  = document.getElementById('pitstopq1');
  }

  //GO TO NEXT SCREEN
  if (views && psview && psview.object && next) {
    psview.object.setCurrentView(next);		
  }
  
  
}

function pitstopq3Back(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var back     = document.getElementById('pitstopq2');
  
  //GO TO PREVIOUS SCREEN
  if (views && psview && psview.object && back) {
      psview.object.setCurrentView(back);		
    }
}

function pitstopq3Next(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var answer   = document.getElementById('q3answer');
  var errortxt = document.getElementById('q3error');
  
  if (isInteger(answer.value) && parseInt(answer.value) > 0){
    //READ THE VALUE FROM THE TEXTBOX
    pitstopobj[currentplayerid].answers[2] = answer.value;
    
    PTproblem = document.getElementById('ptrules10');
    PTguess = pitstopobj[currentplayerid].answers[2];
    
    addGuessJS(playerlist[currentplayerid].name,PTproblem,PTguess,'NULL');
    
    //RESET TEXTBOX VALUE
    answer.value='';
    errortxt.style.visibility='hidden';
  
    //INCREMENT TO NEXT PLAYER IN LIST
    //IF THIS IS THE ADMIN SKIP 
    do{
      currentplayerid++;
    }while (currentplayerid < MAXPLAYERS && playerlist[currentplayerid].admin);
    if (currentplayerid != MAXPLAYERS) playerlist[currentplayerid].isplaying=1;

    //IF WE HAVE FINISHED ALL PLAYERS GO TO ADMIN VIEW, ELSE GET THE 
    //INPUT FROM THE REMAINING PLAYERS
    if (currentplayerid == numPlayers){
      next       = document.getElementById('pitstoppass2admin');
      afternext  = document.getElementById('pitstopadminq1'); 
      
      //SET PLAYER NAME FOR THE PASS 2 PLAYER SCREEN
      var playername         = document.getElementById('psadminname');
      playername.innerHTML   = adminname;

      if (views && psview && psview.object && next) {
        //GO TO NEXT SCREEN
        setadminValues();
        psview.object.setCurrentView(next);		
      }
    } // if ends
    else{
      next       = document.getElementById('pitstoppass2player');
      afternext  = document.getElementById('pitstopq1'); 
    
      //SET PLAYER NAME
      var q1playername       = document.getElementById('q1player');
      q1playername.innerHTML = playerlist[currentplayerid].name;
      
      //SET THE NAME FOR THE PASS 2 PLAYER SCREEN
      var playername         = document.getElementById('psp2pname');
      playername.innerHTML   = playerlist[currentplayerid].name;
      
      var playeravatar       = document.getElementById('psp2pavatar');
      playeravatar.src       = playerlist[currentplayerid].avatar;

      
      if (views && psview && psview.object && next) {
        psview.object.setCurrentView(next);
      }
    } // else ends
  } // if isInteger ends 
  else{
    errortxt.style.visibility='visible';
  }
  
}//function ends

function setadminValues(){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var pt1      = document.getElementById('pitstopadminq1');
  var pt2      = document.getElementById('pitstopadminq2');
  var pt3      = document.getElementById('pitstopadminq3');
  
  var playername;
  var playerans;
  
  //SET PLAYER NAMES AND ANSWERS
  for (var i = 0; i < numPlayers; i++){
    for (var j = 0; j < 3; j++){
      // get the column, make it visible
    
      //get the text element for the player name and the player answer
      playername  = document.getElementById('q'+ (j+1) + 'player' + (i+1));
      playerans   = document.getElementById('q'+ (j+1) + 'answerp'+ (i+1));
      playerscore = document.getElementById('q'+ (j+1) + 'scorep' + (i+1));
    
      //update the text element for the player name and the player answer
      playername.innerHTML = playerlist[i].name;
      playerans.innerHTML  = pitstopobj[i].answers[j];
      
      //if admin then hide else make it visible
      if (playerlist[i].admin){
        playername.style.visibility='hidden';
        playerans.style.visibility='hidden';
        playerscore.style.visibility='hidden';
      }
      else{
        playername.style.visibility='visible';
        playerans.style.visibility='visible';
        playerscore.style.visibility='visible';
      }
      
    }
    
  }
}


function pitstopadminq1(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var next     = document.getElementById('pitstopadminq2');
  
  //READ AND INCREMENT PLAYER SCORES
  for (var i = 0; i < numPlayers; i++){
    score = document.getElementById('q1scorep' + (i+1)).value;
    if (playerlist[i].isplaying){
      playerlist[i].score += parseInt(score);
    }
  }
  
  //GO TO NEXT SCREEN
  if (views && psview && psview.object && next) {
    psview.object.setCurrentView(next);		
  }
  
}


function pitstopadminq2(event){
  var views    = document.getElementById('stackLayout');
  var psview   = document.getElementById('amstackLayout3');
  var next     = document.getElementById('pitstopadminq3');
  
  //SET PLAYER NAMES AND ANSWERS
  //var q1playername       = document.getElementById('q1player');
  //q1playername.innerHTML = playerlist[currentplayerid].name;
  
  //READ AND INCREMENT PLAYER SCORES
  for (var i = 0; i < numPlayers; i++){
    score = document.getElementById('q2scorep' + (i+1)).value;
    if (playerlist[i].isplaying){
      playerlist[i].score += parseInt(score);
    }
    
  }
  
  //GO TO NEXT SCREEN
  if (views && psview && psview.object && next) {
    psview.object.setCurrentView(next);		
  }
  
}

function pitstopadminq3(event){
  var views    = document.getElementById('stackLayout');
  var next     = document.getElementById('scores');
  
  //SET PLAYER NAMES AND ANSWERS
  //var q1playername       = document.getElementById('q1player');
  //q1playername.innerHTML = playerlist[currentplayerid].name;
  
  //READ AND INCREMENT PLAYER SCORES
  for (var i = 0; i < numPlayers; i++){
    score = document.getElementById('q3scorep' + (i+1)).value;
    if (playerlist[i].isplaying){
      playerlist[i].score += parseInt(score);
    }
    
  }
  
  //GO TO NEXT SCREEN
  if (views && views.object && next) {
    displayScores();
    views.object.setCurrentView(next);		
  }
  
}

///////////////////////////////////////////////////////////////
// EVENT HANDLERS ETC FOR PIT STOP STUFF 
///////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////
// DATABASE CODE BEGINS
///////////////////////////////////////////////////////////////

function addPlayerJS(str)
{
	xmlhttp=prepareXmlObject(str, "playeridtxt");
	if (xmlhttp==null) {
		return;
	}
//	for the GET method
//	url = url+"?name="+str+"&sid="+4;
//	xmlhttp.onreadystatechange=stateChanged;
//	xmlhttp.open("GET",url,true);
//	xmlhttp.send(null);

//	for the POST method
	var params = "name="+str+"&sid="+currentsid+"&category=addplayer";
	xmlhttp.onreadystatechange=displayPlayer;
	sendInfoToPHP(xmlhttp, url, params);
}

function addUserJS(fname, lname) {
	if(fname.length==0 || lname.length==0) {
		return;
	}
	xmlhttp=prepareXmlObject(fname+lname, "useridtxt");
	if (xmlhttp==null) {
		return;
	}
	var params = "firstname="+fname+"&lastname="+lname+"&category=adduser";
	xmlhttp.onreadystatechange=displayUser;
	sendInfoToPHP(xmlhttp, url, params);
}

function loginJS(fname, lname) {
	if(fname.length==0 || lname.length==0) {
		return;
	}
	xmlhttp=prepareXmlObject(fname+lname, "uidtxt");
	if (xmlhttp==null) {
		return;
	}
	var params = "firstname="+fname+"&lastname="+lname+"&category=getuser";
	xmlhttp.onreadystatechange=displayUID;
	sendInfoToPHP(xmlhttp, url, params);
}

function addGuessJS(name, problem, guess, answer) {
	if(name.length == 0 || problem.length == 0 || guess.length == 0 || answer.length == 0) {
		return;
	}
	xmlhttp=prepareXmlObject(name+problem+guess+answer, "guessidtxt");
	if (xmlhttp==null) {
		return;
	}
	var params = "name="+name+"&sid="+currentsid+"&prob="+problem+"&guess="+guess+"&answer="+answer+"&category=addguess";
	xmlhttp.onreadystatechange=displayGuess;
	sendInfoToPHP(xmlhttp, url, params);
}

function add2ScoreInDBJS(name, points) {
	if(name.length == 0 || points.length == 0) {
		return;
	}
	xmlhttp=prepareXmlObject(name+points+"scoretxt");
	if (xmlhttp==null) {
		return;
	}
	var params = "name="+name+"&sid="+currentsid+"&points="+points+"&category=updatescore";
	xmlhttp.onreadystatechange=displayScore;
	sendInfoToPHP(xmlhttp, url, params);
}

function createSessionJS() {
	xmlhttp=prepareXmlObject(""+userid, "playeridtxt");
	if (xmlhttp==null) {
		return;
	}
    
//	document.getElementById("sessionidtxt").innerHTML = userid;
	var params = "uid="+userid+"&category=createsession";
	xmlhttp.onreadystatechange=displaySession;
	sendInfoToPHP(xmlhttp, url, params);
}

function sendInfoToPHP(xmlobj, url, params) {
//	xmlobj.onreadystatechange=fieldDisplay(field);
	xmlobj.open("POST",url,true);
	//Send the proper header information along with the request
	xmlobj.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
	xmlobj.setRequestHeader("Content-length", params.length);
	xmlobj.setRequestHeader("Connection", "close");
	xmlobj.send(params);
}

function prepareXmlObject(str, element) {
	if(str.length==0) {
		document.getElementById(element).innerHTML="";
		return null;
	}
	xmlhttp=GetXmlHttpObject();
    //firebug.watchXHR(xmlhttp);
	if(xmlhttp==null) {
		alert ("Your browser does not support XMLHTTP!");
	}
	return xmlhttp;
}

function fieldDisplay(element) {
	if (xmlhttp.readyState==4 && xmlhttp.status==200)
	{
		//document.getElementById(element).innerHTML=xmlhttp.responseText;
	}
}

function displayPlayer() {
	fieldDisplay("playeridtxt");
}

function displayUser() {
	//fieldDisplay("useridtxt");
	if (xmlhttp.readyState==4 && xmlhttp.status==200) {
		window.userid = xmlhttp.responseText;
        createSessionJS();
	}
}

function displayGuess() {
	fieldDisplay("guessidtxt");
}
function displayScore() {
	fieldDisplay("scoretxt");
}
function displaySession() {
	//fieldDisplay("sessionidtxt");
	if (xmlhttp.readyState==4 && xmlhttp.status==200) {
		window.currentsid = xmlhttp.responseText;
	}
}
function displayUID() {
	//fieldDisplay("uidtxt");
	if (xmlhttp.readyState==4 && xmlhttp.status==200) {
		window.userid = xmlhttp.responseText;
        if (window.userid == -1){
          addUserJS(userfname, userlname);
        }
        else{
          createSessionJS();
        }
	}
}

function GetXmlHttpObject()
{
	if (window.XMLHttpRequest)
	{
		// code for IE7+, Firefox, Chrome, Opera, Safari
		return new XMLHttpRequest();
	}
	if (window.ActiveXObject)
	{
		// code for IE6, IE5
		return new ActiveXObject("Microsoft.XMLHTTP");
	}
	return null;
}

///////////////////////////////////////////////////////////////
// DATABASE CODE ENDS
//--------------------------------------------------------------
// EVENT HANDLERS ETC FOR ESTIMATION STATION 
///////////////////////////////////////////////////////////////

function removeSpaces(string) 
{
 return string.split(' ').join('');
}



function MakeEstimates(event)
{    //create question text for Open and Secret guess pages 
    document.getElementById('text51').innerText =  document.getElementById('text51').innerText = "How many " + document.getElementById('adjectivepopup').value + " " + document.getElementById('nounpopup').value + " will we pass in the next " + document.getElementById('estimatetimepopup').value + "?";
   
    document.getElementById('text7').innerText = document.getElementById('text51').innerText;


    //send to Open or Secret mode
      secretMode = document.getElementById('secretmode').checked;
      if (secretMode){
            SetEstimateAvatars(event,"")
            MakeSecretEstimates(event)
      }
      else{
            SetEstimateAvatars(event,"Open")
            MakeOpenEstimates(event)
      }
}

function CounterPlus(event,a)
{
    estimateCount++;
    document.getElementById('EstimateCounter' + a).innerText = estimateCount;
}

function CounterMinus(event,a)
{
    estimateCount--;
    document.getElementById('EstimateCounter' + a).innerText = estimateCount;
}

function EnterSecretEstimate1(event)
{
    EnterSecretEstimateCheck(event,1);
}

function EnterSecretEstimate2(event)
{
    EnterSecretEstimateCheck(event,2);
}

function EnterSecretEstimate3(event)
{
    EnterSecretEstimateCheck(event,3);
}

function EnterSecretEstimate4(event)
{
    EnterSecretEstimateCheck(event,4);
}


function EnterSecretEstimateCheck(event,a)
{
	if(isPositiveInteger(document.getElementById("PlayerEstimate" + a).value)){
        //puts secretimage infront of entered estimate, hides any existing error message
        document.getElementById("SecretCover" + a).style.visibility = 'visible';
        hideEstimationErrorMessages(event);
    }
    else {  //error message, clearentryfield
        document.getElementById("PlayerEstimate" + a).value = "";
        showEstimationErrorMessages(event);
    }
}


function SetEstimateAvatars(event,a)
{
    for (var i = 0; i < numPlayers; i++){
        var currAvatar = document.getElementById(a + 'EstimateAvatar' + (i + 1));
        currAvatar.src = playerlist[i].avatar;    
        currAvatar.style.visibility = 'visible';
        var currName = document.getElementById(a + 'estimatePlayerName' + (i + 1));
        currName.innerText = playerlist[i].name;
        currName.style.visibility = 'visible';
        document.getElementById(a + 'PlayerEstimate' + (i + 1)).style.visibility = 'visible';
        
        if(a == ""){   // enter buttons only need to be turned visible in secret mode
            document.getElementById('EnterButton' + (i + 1)).style.visibility = 'visible';
        }
    }
}

function MakeSecretEstimates(event)
{
    setCurrentViewEst(document.getElementById('MakeEstimatesSecret'));

}

function MakeOpenEstimates(event)
{
    setCurrentViewEst(document.getElementById('MakeEstimatesOpen'));
}

function GetEstimationHints(event)
{
//get Hints page ready
    document.getElementById('text121').innerText = document.getElementById('adjectivepopup').value + " " + document.getElementById('nounpopup').value;
    document.getElementById('text123').innerText = document.getElementById('estimatetimepopup').value + 
    "...";
    
    var numMinutes = document.getElementById('estimatetimepopup').value.charAt(0);
    var numSeconds = numMinutes * 60;
    var sampleMultiplier = numMinutes * 2;
    document.getElementById('text124').innerText = "1. Figure out how many total seconds you are counting. There are 60 seconds in every minute, so " + numMinutes + " min = " + numMinutes + " x 60 = " + numSeconds + " seconds."; 
    document.getElementById('text52').innerText = "2. Now count how many " + document.getElementById('adjectivepopup').value + " " + document.getElementById('nounpopup').value + " pass in the next 30 seconds. Ready? Count!"
    document.getElementById('text83').innerText = "3. Multiple that number by " + sampleMultiplier + ". That's a good estimate for the game because " + numSeconds + " seconds is " + sampleMultiplier +  " times longer than the 30 seconds you sampled. If none passed by, estimate zero or one.";
    
    setCurrentViewEst(document.getElementById('EstimationHints')); 
}

function BeginSecretEstimationContest(event)
{
    BeginEstimationContest(event,"");
}

function BeginOpenEstimationContest(event)
{
    BeginEstimationContest(event,"Open");
}

function BeginEstimationContest(event,a)  // Takes "" for secret, "Open" for Open
{
    if(AllAnswersAreIntegers(a)){   
        // gets ContestBegun text ready
        var adjective = document.getElementById('adjectivepopup').value;
        var noun = removeSpaces(document.getElementById('nounpopup').value);
        document.getElementById('text127').innerText =  adjective + " " + noun + ".";    
        estimateCount = 0;
        document.getElementById('EstimateCounter1').innerText = estimateCount;
        // makes the correct image visible
        document.getElementById(adjective + noun).style.visibility = 'visible';
        BeginTimer(event);
        setCurrentViewEst(document.getElementById('ContestBegun')); 
    }
    else{
        showEstimationErrorMessages(event);
        ClearNonValidEstimates(a);
    }
}

function AllAnswersAreIntegers(a)
{
    for(i = 1; i < numPlayers + 1; i++){
        var estimate = document.getElementById(a + "PlayerEstimate" + i).value;
        if(!isPositiveInteger(estimate)){return(false)}
    }
    return(true);
}

function ClearNonValidEstimates(a)
{
   for(i = 1; i < numPlayers + 1; i++){
        var estimate = document.getElementById(a + "PlayerEstimate" + i).value;
        if(!isPositiveInteger(estimate)){
            document.getElementById(a + "PlayerEstimate" + i).value = "";
        }
    }
}

function RandomizeAdjNounTimeSecret(event)
{
    var num1 = (Math.floor(Math.random()* (EstimationNouns.length - 1)));
    document.getElementById('nounpopup').value = EstimationNouns[num1];
    
    do{
        var num2 = (Math.floor(Math.random()* (EstimationAdjectives.length - 1)));
        document.getElementById('adjectivepopup').value = EstimationAdjectives[num2];
    }
    while (!(appropriateAdj[num2][num1]));
    
    var num3 = (Math.floor(Math.random()* (EstimationTimes.length - 1)));
    document.getElementById('estimatetimepopup').value = EstimationTimes[num3];
    
    document.getElementById('secretmode').checked = Math.floor(Math.random() * 2);
    
    disableInvalidNouns(event);
    disableInvalidAdjs(event);
}


function BeginTimer(event)
{
    estimateTimerMin = document.getElementById('estimatetimepopup').value.charAt(0); // After testing, change to document.getElementById('estimatetimepopup').value.charAt(0);
    estimateTimerSec = 0; // After testing, change to 0
    
    document.getElementById('remaining-minutes').innerText = formatTwoDigits(estimateTimerMin);
    document.getElementById('remaining-seconds').innerText = formatTwoDigits(estimateTimerSec);
    
    estimateTimer = setInterval("SubtractOneSecond(event)",1000);
}

function SubtractOneSecond(event)
{
    if((estimateTimerMin == 0) && (estimateTimerSec == 0)){
        clearInterval(estimateTimer);
        GetEstimationResults(event);
    }
    else{
            estimateTimerSec--;
            if(estimateTimerSec == -1){
                estimateTimerSec = 59;
                estimateTimerMin--;
            }
            document.getElementById('remaining-minutes').innerText = formatTwoDigits(estimateTimerMin);
            document.getElementById('remaining-seconds').innerText = formatTwoDigits(estimateTimerSec);
    }
}

//
// Function: formatTwoDigits(number)
// Format a number as one or two digits with a leading zero if needed
//
// number: The number to format
//
// Returns the formatted number as a string.
//

function formatTwoDigits(number)
{
    var digits = number.toString(10);

    // Add a leading zero if it's only one digit long
    if (digits.length == 1) {
        digits = "0" + digits;
    }
    return digits;
}


function GetEstimationResults(event)
{
        //setup top of EstimationResults page
    document.getElementById('EstimateCounter2').innerText = estimateCount;
    document.getElementById('text144').innerText = document.getElementById('adjectivepopup').value + " " + document.getElementById('nounpopup').value + ".";

    //populate the array of player estimates, set up Player estimate, make it visible
    var a = "";
    if(!secretMode){a = "Open";}
    for(i = 0; i < numPlayers; i++){
        estimatesObj[i].playerNumber = i; // useful later when we pass these objects into estimateWinners
        estimatesObj[i].estimate =  document.getElementById(a + 'PlayerEstimate' + (i + 1)).value;
        var currSentence = document.getElementById('PlayerEstimated' + (i + 1));
        currSentence.innerText = playerlist[i].name + " estimated " + estimatesObj[i].estimate + ".";
        currSentence.style.visibility = 'visible';
    }
    
    setCurrentViewEst(document.getElementById('EstimationResults'));
    var t = setTimeout('RevealEstimationResultsWinner(event)', 5000);   //waits five seconds, reveals winner, etc
}

function RevealEstimationResultsWinner(event)
{
    // generates differneces 
    for(i = 0; i < numPlayers; i++){
        estimatesObj[i].difference = Math.abs(estimatesObj[i].estimate - estimateCount);
    }
    // finds best guess
    var bestGuess = 99999999999999999999999;
    for(i = 0; i < numPlayers; i++){
        if(estimatesObj[i].difference < bestGuess){
            bestGuess = estimatesObj[i].difference;
        }
    }
    
    // adds all winners to estimationWinners Array
    var estimationWinners = new Array();
    var j = 0;
    for(i = 0; i < numPlayers; i++){
        if(estimatesObj[i].difference == bestGuess){
            estimationWinners[j] = estimatesObj[i];
            j++;
        }
    }
    
    // Makes WinnerAvatars visible
    //for(i = 0; i < estimationWinners.length; i++){
    //    var currAvatar = document.getElementById('winnerAvatar' + (i + 1));
    //    currAvatar.src = playerlist[estimationWinners[i].playerNumber].avatar;    
    //    currAvatar.style.visibility = 'visible';
    //}
    
    var currAvatar3 = document.getElementById('winnerAvatar1');
    currAvatar3.src = "Images/avatar_dog.jpg";
    currAvatar3.style.visibility = 'visible';
    
    //Generate WinnerAnnouncement, make it visible
    var WinnerAnnounce = playerlist[estimationWinners[0].playerNumber].name;
    for(i = 1; i < estimationWinners.length; i++){
        WinnerAnnounce = WinnerAnnounce + " and " + playerlist[estimationWinners[1].playerNumber].name;
    }
    WinnerAnnounce = WinnerAnnounce + "! ";
    if(estimationWinners.length > 1){WinnerAnnounce = WinnerAnnounce + " It's a tie!";}
    document.getElementById('winnerAnnouncement').innerText = WinnerAnnounce;
    document.getElementById('winnerAnnouncement').style.visibility = 'visible';
    
    //GenerateWinnerExplanation, make it visible
    var winnerExplanation = "Why? Well, the difference between " + estimationWinners[0].estimate + " and " + estimateCount + " is " + estimationWinners[0].difference + ", the smallest difference between an estimate and the real number of " + document.getElementById('text144').innerText + " " + playerlist[estimationWinners[0].playerNumber].name;
    for(i = 1; i < estimationWinners.length; i++){
        winnerExplanation = winnerExplanation + " and " + playerlist[estimationWinners[1].playerNumber].name;
    }
    winnerExplanation = winnerExplanation + ": how did you do so well? Share your estimation secrets with the group.";
    document.getElementById('winnerExplanation').innerText = winnerExplanation;
    document.getElementById('winnerExplanation').style.visibility = 'visible';
    
    // Send points won to database
    var pointsWon = 40 - bestGuess;  // perfect estimate wins 30 points
    if(pointsWon < 20){pointsWon = 20;}
    for(var i = 0; i < estimationWinners.length; i++){
        playerlist[estimationWinners[i].playerNumber].score += pointsWon;
        add2ScoreInDBJS(playerlist[estimationWinners[i].playerNumber].name, pointsWon);
    }
}

function clearAndReturnToEstimates(event)
{
    clearInterval(estimateTimer);
    for(var i = 1; i < 5; i++){    // clears estimates, secretcover images
        document.getElementById('PlayerEstimate' + i).value = "";
        document.getElementById('OpenPlayerEstimate' + i).value = "";
        document.getElementById('SecretCover' + i).style.visibility = 'hidden';
    }
    backToEstimates(event);
}


function backToEstimates(event)
{
    hideEstimationErrorMessages(event);
    if (secretMode) { MakeSecretEstimates(event)
    } else { MakeOpenEstimates(event)
    }
}


function hideEstimationErrorMessages(event)
{
    document.getElementById("EstimateError").style.visibility = 'hidden';
    document.getElementById("OpenEstimateError").style.visibility = 'hidden';
}

function showEstimationErrorMessages(event)
{
    document.getElementById("EstimateError").style.visibility = 'visible';
    document.getElementById("OpenEstimateError").style.visibility = 'visible';
}


function isPositiveInteger(val)
{
      if(val==null){return false;}
      if (val.length==0){return false;}
      for (var i = 0; i < val.length; i++) {
            var ch = val.charAt(i)
            if (ch < "0" || ch > "9") {
            return false;
            }
      }
      return true;
}


function CounterMinus1(event)
{
    CounterMinus(event,1);
}


function CounterPlus1(event)
{
    CounterPlus(event,1);
}

function CounterMinus2(event)
{
    CounterMinus(event,2);
}

function CounterPlus2(event)
{
    CounterPlus(event,2);
}

function setupAppropriateAdj(event)   // as more Adj or Nouns are added, this function should be changed to reflect new combinations
{
    appropriateAdj[0] = new Array(1,1,1,1,1,1,1,1,1);  // This is the one adj ("") appropriate for all nouns, so all are set to True
    
    for(var i = 1; i < EstimationAdjectives.length; i++){
        appropriateAdj[i] = new Array(1,0,0,1,1,0,0,0,1);
    }
}


function disableInvalidNouns(event)
{
    // find adj value
    var adjValue = document.getElementById('adjectivepopup').value;
    var adjNumber;
    for(var i = 0; i < EstimationAdjectives.length;i++){
        if(EstimationAdjectives[i] == adjValue){
            adjNumber = i;
        }
    }

    for(var i = 0; i < EstimationNouns.length; i++){
        document.getElementById("nounpopup").options[i].disabled = !(appropriateAdj[adjNumber][i]); 
    }
}

function disableInvalidAdjs(event)
{
    // find noun value
    var nounValue = document.getElementById('nounpopup').value;
    var nounNumber;
    for(var i = 0; i < EstimationNouns.length;i++){
        if(EstimationNouns[i] == nounValue){
            nounNumber = i;
        }
    }

    for(var i = 0; i < EstimationAdjectives.length; i++){
        document.getElementById("adjectivepopup").options[i].disabled = !(appropriateAdj[i][nounNumber]); 
    }
           
}

function setCurrentViewEst(a) 
{
    var view = document.getElementById('stackLayout');
    var est = document.getElementById('trafficLights');
    var est2 = document.getElementById('tl');
    est2.object.setCurrentView(a);
    view.object.setCurrentView(est);
}


function startEstimStat(event)
{
    estimateCount = 0;        //clear scores 
    for(var i = 1; i < 5; i++){    // clears estimates, secretcover images, results page
    document.getElementById('PlayerEstimate' + i).value = "";
        document.getElementById('OpenPlayerEstimate' + i).value = "";
        document.getElementById('SecretCover' + i).style.visibility = 'hidden';
        document.getElementById('winnerAvatar' +i).style.visibility = 'hidden';
        document.getElementById('PlayerEstimated' +i).style.visibility = 'hidden';
    }
    document.getElementById('winnerAnnouncement').style.visibility = 'hidden';
    document.getElementById('winnerExplanation').style.visibility = 'hidden';
    for (var i = 0; i < EstimationAdjectives.length; i++){   //hides all "ContestBegun" images;
        for(var j = 0; j < EstimationNouns.length; j++){
        var adjective = EstimationAdjectives[i];
            var noun = removeSpaces(EstimationNouns[j]);  // for "Gas Stations"
            if(document.getElementById(adjective + noun) != undefined){
                document.getElementById(adjective + noun).style.visibility = 'hidden';
            }
        }
    }
    setCurrentViewEst(document.getElementById('GuessSelection'));
}


function startEstimationStation(event)
{
    // Insert Code Here
}

function selectAvatar1(event)
{
    selectAvatar(event, 1);
}

function selectAvatar2(event)
{
    selectAvatar(event, 2);
}

function selectAvatar3(event)
{
    selectAvatar(event, 3);
}

function selectAvatar4(event)
{
    selectAvatar(event, 4);
}

function selectAvatar(event, i)
{
    currPlayerToChangeAvatar = document.getElementById('avatar' + i)
    var views = document.getElementById('stackLayout');
    var about = document.getElementById('avatarSelect');
    if (views && views.object && about) {
        views.object.setCurrentView(about);
    }
}

function changeAvatar1(event)
{
    changeAvatar(event, 1);
}

function changeAvatar2(event)
{
    changeAvatar(event, 2);
}

function changeAvatar3(event)
{
    changeAvatar(event, 3);
}

function changeAvatar4(event)
{
    changeAvatar(event, 4);
}

function changeAvatar5(event)
{
    changeAvatar(event, 5);
}


function changeAvatar6(event)
{
    changeAvatar(event, 6);
}


function changeAvatar7(event)
{
    changeAvatar(event, 7);
}


function changeAvatar8(event)
{
    changeAvatar(event, 8);
}


function changeAvatar9(event)
{
    changeAvatar(event, 9);
}


function changeAvatar10(event)
{
    changeAvatar(event, 10);
}


function changeAvatar11(event)
{
    changeAvatar(event, 11);
}


function changeAvatar12(event)
{
    changeAvatar(event, 12);
}

function changeAvatar(event, num)
{
    selectedImage = document.getElementById('avatar'+(num+8));
    currPlayerToChangeAvatar.src = selectedImage.src;
    returnToPlayerSelect(event);
}


function returnToPlayerSelect(event)
{
    var views = document.getElementById('stackLayout');
    var about = document.getElementById('players');
    if (views && views.object && about) {
        views.object.setCurrentView(about);
    }
}